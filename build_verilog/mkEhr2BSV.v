//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sat May 17 15:22:50 IDT 2014
//
// Method conflict info:
// Method: r1__write
// Conflict-free: r1__read
// Sequenced before (restricted): r2__write, r2__read
// Conflicts: r1__write
//
// Method: r1__read
// Conflict-free: r1__write, r1__read, r2__write, r2__read
//
// Method: r2__write
// Conflict-free: r1__read, r2__read
// Sequenced after (restricted): r1__write
// Conflicts: r2__write
//
// Method: r2__read
// Conflict-free: r1__read, r2__write, r2__read
// Sequenced after (restricted): r1__write
//
//
// Ports:
// Name                         I/O  size props
// RDY_r1__write                  O     1 const
// r1__read                       O    32 reg
// RDY_r1__read                   O     1 const
// RDY_r2__write                  O     1 const
// r2__read                       O    32
// RDY_r2__read                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// r1__write_1                    I    32
// r2__write_1                    I    32
// EN_r1__write                   I     1
// EN_r2__write                   I     1
//
// Combinational paths from inputs to outputs:
//   (r1__write_1, EN_r1__write) -> r2__read
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkEhr2BSV(CLK,
		 RST_N,

		 r1__write_1,
		 EN_r1__write,
		 RDY_r1__write,

		 r1__read,
		 RDY_r1__read,

		 r2__write_1,
		 EN_r2__write,
		 RDY_r2__write,

		 r2__read,
		 RDY_r2__read);
  input  CLK;
  input  RST_N;

  // action method r1__write
  input  [31 : 0] r1__write_1;
  input  EN_r1__write;
  output RDY_r1__write;

  // value method r1__read
  output [31 : 0] r1__read;
  output RDY_r1__read;

  // action method r2__write
  input  [31 : 0] r2__write_1;
  input  EN_r2__write;
  output RDY_r2__write;

  // value method r2__read
  output [31 : 0] r2__read;
  output RDY_r2__read;

  // signals for module outputs
  wire [31 : 0] r1__read, r2__read;
  wire RDY_r1__read, RDY_r1__write, RDY_r2__read, RDY_r2__write;

  // register ehr_r
  reg [31 : 0] ehr_r;
  wire [31 : 0] ehr_r$D_IN;
  wire ehr_r$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_ehr_do_stuff,
       CAN_FIRE_r1__write,
       CAN_FIRE_r2__write,
       WILL_FIRE_RL_ehr_do_stuff,
       WILL_FIRE_r1__write,
       WILL_FIRE_r2__write;

  // remaining internal signals
  wire [31 : 0] x__h1056;

  // action method r1__write
  assign RDY_r1__write = 1'd1 ;
  assign CAN_FIRE_r1__write = 1'd1 ;
  assign WILL_FIRE_r1__write = EN_r1__write ;

  // value method r1__read
  assign r1__read = ehr_r ;
  assign RDY_r1__read = 1'd1 ;

  // action method r2__write
  assign RDY_r2__write = 1'd1 ;
  assign CAN_FIRE_r2__write = 1'd1 ;
  assign WILL_FIRE_r2__write = EN_r2__write ;

  // value method r2__read
  assign r2__read = EN_r1__write ? r1__write_1 : ehr_r ;
  assign RDY_r2__read = 1'd1 ;

  // rule RL_ehr_do_stuff
  assign CAN_FIRE_RL_ehr_do_stuff = 1'd1 ;
  assign WILL_FIRE_RL_ehr_do_stuff = 1'd1 ;

  // register ehr_r
  assign ehr_r$D_IN = EN_r2__write ? r2__write_1 : x__h1056 ;
  assign ehr_r$EN = 1'd1 ;

  // remaining internal signals
  assign x__h1056 = r2__read ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        ehr_r <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (ehr_r$EN) ehr_r <= `BSV_ASSIGNMENT_DELAY ehr_r$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ehr_r = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkEhr2BSV

